#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100


struct Stack {
    char arr[MAX_SIZE];
    int top;
};

void initialize(struct Stack* stack) {
    stack->top = -1;
}

int isEmpty(struct Stack* stack) {
    return (stack->top == -1);
}

int isFull(struct Stack* stack) {
    return (stack->top == MAX_SIZE - 1);
}

void push(struct Stack* stack, char value) {
    if (isFull(stack)) {
        printf("Stack is full. Cannot push %c.\n", value);
        return;
    }
    stack->top++;
    stack->arr[stack->top] = value;
}

char pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. Cannot pop.\n");
        return '\0'; 
    }
    char value = stack->arr[stack->top];
    stack->top--;
    return value;
}

char peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. Cannot peek.\n");
        return '\0'; 
    }
    return stack->arr[stack->top];
}

int isOperand(char ch) {
    return (ch >= '0' && ch <= '9');
}

int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    else if (op == '*' || op == '/')
        return 2;
    return 0;
}

void infixToPostfix(char* infix, char* postfix) {
    struct Stack stack;
    initialize(&stack);
    int i, j;
    i = j = 0;

    while (infix[i] != '\0') {
        char ch = infix[i];

        if (isOperand(ch)) {
            postfix[j] = ch;
            j++;
        } else if (ch == '(') {
            push(&stack, ch);
        } else if (ch == ')') {
            while (!isEmpty(&stack) && peek(&stack) != '(') {
                postfix[j] = pop(&stack);
                j++;
            }
            pop(&stack); 
        } else {
            while (!isEmpty(&stack) && precedence(peek(&stack)) >= precedence(ch)) {
                postfix[j] = pop(&stack);
                j++;
            }
            push(&stack, ch);
        }

        i++;
    }

    while (!isEmpty(&stack)) {
        postfix[j] = pop(&stack);
        j++;
    }

    postfix[j] = '\0';
}

void reverseString(char* str) {
    int i, j;
    char temp;
    for (i = 0, j = strlen(str) - 1; i < j; i++, j--) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }
}

void infixToPrefix(char* infix, char* prefix) {
    reverseString(infix);
    struct Stack stack;
    initialize(&stack);
    int i, j;
    i = j = 0;

    while (infix[i] != '\0') {
        char ch = infix[i];

        if (isOperand(ch)) {
            prefix[j] = ch;
            j++;
        } else if (ch == ')') {
            push(&stack, ch);
        } else if (ch == '(') {
            while (!isEmpty(&stack) && peek(&stack) != ')') {
                prefix[j] = pop(&stack);
                j++;
            }
            pop(&stack); // Pop ')'
        } else { 
            while (!isEmpty(&stack) && precedence(peek(&stack)) > precedence(ch)) {
                prefix[j] = pop(&stack);
                j++;
            }
            push(&stack, ch);
        }

        i++;
    }

    while (!isEmpty(&stack)) {
        prefix[j] = pop(&stack);
        j++;
    }

    prefix[j] = '\0';
    reverseString(prefix);
}

int main() {
    char infix[MAX_SIZE], postfix[MAX_SIZE], prefix[MAX_SIZE];
    printf("Enter an infix expression: ");
    scanf("%s", infix);

    infixToPostfix(infix, postfix);
    printf("Postfix notation: %s\n", postfix);

    infixToPrefix(infix, prefix);
    printf("Prefix notation: %s\n", prefix);

    return 0;
}
